{
  "__inputs": [
    {
      "name": "DS_INFLUXDB",
      "label": "InfluxDB",
      "description": "",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "panel",
      "id": "bargauge",
      "name": "Bar gauge",
      "version": ""
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "12.0.1"
    },
    {
      "type": "datasource",
      "id": "influxdb",
      "name": "InfluxDB",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "description": "Grafana Dashboard for Veeam Software Appliance using InfluxDB and Prometheus-like metrics (Unofficial)",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "Veeam Software Appliance Uptime",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "dark-red",
                  "index": 0,
                  "text": "Down"
                },
                "1": {
                  "color": "dark-green",
                  "index": 1,
                  "text": "Up"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue"
              }
            ]
          },
          "unit": "dtdurations"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 0,
        "y": 0
      },
      "id": 3,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"node_time_seconds\" or r._measurement == \"node_boot_time_seconds\")\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> group(columns: [\"serverName\",\"instance\",\"version\",\"_measurement\"])\r\n  |> last()\r\n  |> pivot(rowKey: [\"serverName\",\"instance\",\"version\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with _value: r.node_time_seconds - r.node_boot_time_seconds }))\r\n  |> keep(columns: [\"_time\",\"_value\",\"serverName\",\"instance\",\"version\"])\r\n",
          "refId": "A",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          }
        }
      ],
      "title": "Uptime",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "This panel displays all the needed Veeam Software Appliance information of the unit you are running.",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-purple",
            "mode": "fixed"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Hostname"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Version"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Total RAM"
              },
              {
                "id": "unit",
                "value": "gbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "D"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Number of Cores"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "E"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Number of Disks"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "F"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Number of Ethernet Ports"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "G"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "SWAP Usage %"
              },
              {
                "id": "color",
                "value": {
                  "mode": "thresholds"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-purple"
                    },
                    {
                      "color": "light-yellow",
                      "value": 25
                    },
                    {
                      "color": "dark-orange",
                      "value": 50
                    },
                    {
                      "color": "dark-red",
                      "value": 75
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 21,
        "x": 3,
        "y": 0
      },
      "id": 17,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "vertical",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "/.*/",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "value_and_name",
        "wideLayout": true
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_time_seconds\")\r\n  |> last()\r\n  |> map(fn: (r) => ({ r with _value: r.serverName }))\r\n  |> keep(columns: [\"_time\",\"_value\"])",
          "refId": "A",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          }
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_time_seconds\")\r\n  |> last()\r\n  |> map(fn: (r) => ({ r with _value: r.version }))\r\n  |> keep(columns: [\"_time\",\"_value\"])\r\n",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_memory_MemTotal_bytes\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  |> last()\r\n  |> map(fn: (r) => ({ r with _value: r._value / 1073741824.0 }))\r\n  |> keep(columns: [\"_time\",\"_value\"])\r\n",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_cpu_seconds_total\" and r.cpu != \"all\")\r\n  |> group(columns: [\"serverName\",\"cpu\"])\r\n  |> last()\r\n  |> group(columns: [\"serverName\"])\r\n  |> keep(columns: [\"_time\",\"cpu\"])\r\n  |> distinct(column: \"cpu\")\r\n  |> count()\r\n  |> map(fn: (r) => ({ r with _field: \"logical_cores\" }))\r\n  |> keep(columns: [\"_time\",\"_value\",\"_field\"])",
          "refId": "D"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_disk_reads_completed_total\")\r\n  |> keep(columns: [\"device\",\"_time\"])\r\n  |> distinct(column: \"device\")\r\n  |> count()\r\n  |> keep(columns: [\"_time\",\"_value\"])\r\n",
          "refId": "E"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_network_receive_bytes_total\")\r\n  |> keep(columns: [\"interface\",\"_time\"])\r\n  |> distinct(column: \"interface\")\r\n  |> count()\r\n  |> keep(columns: [\"_time\",\"_value\"])\r\n",
          "refId": "F"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_memory_SwapTotal_bytes\" or r._measurement == \"node_memory_SwapFree_bytes\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  |> pivot(rowKey: [\"_time\",\"serverName\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with _value: 100.0 * (1.0 - float(v: r.node_memory_SwapFree_bytes) / float(v: r.node_memory_SwapTotal_bytes)) }))\r\n  |> keep(columns: [\"_time\",\"_value\",\"serverName\"])\r\n",
          "refId": "G"
        }
      ],
      "title": "Veeam Software Appliance Overview",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "mode": "reduceRow",
            "reduce": {
              "include": [
                "Value",
                "_value"
              ],
              "reducer": "lastNotNull"
            },
            "replaceFields": true
          }
        },
        {
          "id": "reduce",
          "options": {
            "includeTimeField": false,
            "mode": "reduceFields",
            "reducers": [
              "lastNotNull"
            ]
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "Latest Data Collection",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "semi-dark-blue",
            "mode": "fixed"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          },
          "unit": "dateTimeAsIso"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 0,
        "y": 3
      },
      "id": 5,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement =~ /^node_/)\r\n  |> filter(fn: (r) => r[\"host\"] =~ /${backupserver:regex}/ or r[\"serverName\"] =~ /${backupserver:regex}/ or r[\"instance\"] =~ /${backupserver:regex}/)\r\n  |> group()\r\n  |> last()\r\n  |> map(fn: (r) => ({ r with _time: now(), _value: float(v: uint(v: r._time)) / 1000000.0 }))\r\n  |> keep(columns: [\"_time\",\"_value\"])\r\n",
          "refId": "A",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          }
        }
      ],
      "title": "Latest Data Collection",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-blue",
            "mode": "fixed"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 30,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "fieldMinMax": false,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-blue"
              },
              {
                "color": "semi-dark-orange",
                "value": 80
              },
              {
                "color": "semi-dark-red",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "${__field.labels.cpu}"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "shades"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 6
      },
      "id": 1,
      "interval": "$inter",
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"node_cpu_seconds_total\")\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/ or r.instance =~ /${backupserver:regex}/)\r\n  |> group(columns: [\"serverName\",\"instance\",\"version\",\"cpu\",\"mode\"])\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  |> derivative(unit: 1s, nonNegative: true)\r\n  |> pivot(rowKey: [\"_time\",\"serverName\",\"instance\",\"version\",\"cpu\"], columnKey: [\"mode\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with total: r.user + r.nice + r.system + r.irq + r.softirq + r.steal + r.guest + r.guest_nice + r.iowait + r.idle }))\r\n  |> map(fn: (r) => ({ r with _value: if r.total > 0.0 then (r.total - r.idle - r.iowait) / r.total * 100.0 else 0.0 }))\r\n  |> keep(columns: [\"_time\",\"_value\",\"serverName\",\"instance\",\"version\",\"cpu\"])\r\n",
          "refId": "A"
        }
      ],
      "title": "Veeam Software Appliance - CPU Usage in %",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-blue",
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 30,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "fieldMinMax": false,
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-blue"
              },
              {
                "color": "semi-dark-orange",
                "value": 80
              },
              {
                "color": "semi-dark-red",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "RAM Usage %"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-purple",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 12,
        "y": 6
      },
      "id": 2,
      "interval": "$inter",
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_memory_MemTotal_bytes\" or r._measurement == \"node_memory_MemAvailable_bytes\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  |> group(columns: [\"serverName\",\"instance\",\"version\",\"_measurement\"])\r\n  |> pivot(rowKey: [\"_time\",\"serverName\",\"instance\",\"version\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with _value: (1.0 - r.node_memory_MemAvailable_bytes / r.node_memory_MemTotal_bytes) * 100.0 }))\r\n  |> keep(columns: [\"_time\",\"_value\",\"serverName\",\"instance\",\"version\"])\r\n  |> yield(name: \"mem_used_pct\")\r\n",
          "refId": "A"
        }
      ],
      "title": "Veeam Software Appliance - RAM Usage in %",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-BlYlRd"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Traffic Sent",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 30,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 0,
          "displayName": "${__field.labels.interface} in",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green"
              }
            ]
          },
          "unit": "KBs"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "custom.transform",
                "value": "negative-Y"
              },
              {
                "id": "displayName",
                "value": "${__field.labels.interface} out"
              },
              {
                "id": "color",
                "value": {
                  "mode": "continuous-RdYlGr"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 13
      },
      "id": 10,
      "interval": "$inter",
      "options": {
        "legend": {
          "calcs": [
            "lastNotNull",
            "max"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_network_transmit_bytes_total\")\r\n  |> filter(fn: (r) => exists r.interface and r.interface != \"\")\r\n  |> group(columns: [\"serverName\",\"interface\"])\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  |> derivative(unit: 1s, nonNegative: true)\r\n  |> keep(columns: [\"_time\",\"_value\",\"serverName\",\"interface\"])\r\n  |> yield(name: \"tx B/s\")\r\n",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_network_receive_bytes_total\")\r\n  |> filter(fn: (r) => exists r.interface and r.interface != \"\")\r\n  |> group(columns: [\"serverName\",\"interface\"])\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  |> derivative(unit: 1s, nonNegative: true)\r\n  |> keep(columns: [\"_time\",\"_value\",\"serverName\",\"interface\"])\r\n  |> yield(name: \"rx B/s\")\r\n",
          "refId": "B"
        }
      ],
      "title": "Veeam Software Appliance - Network Usage - Traffic",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "super-light-blue",
            "mode": "shades"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 30,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 0,
          "fieldMinMax": false,
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-blue"
              }
            ]
          },
          "unit": "binBps"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "${__field.labels.device} - reads"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "${__field.labels.device} - writes"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-blue",
                  "mode": "shades"
                }
              },
              {
                "id": "custom.transform"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 20
      },
      "id": 11,
      "interval": "$inter",
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_disk_read_bytes_total\")\r\n  |> filter(fn: (r) => exists r.device and r.device != \"\")\r\n  |> group(columns: [\"serverName\",\"device\"])\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  |> derivative(unit: 1s, nonNegative: true)\r\n  |> set(key: \"_field\", value: \"read_bps\")\r\n  |> keep(columns: [\"_time\",\"_value\",\"serverName\",\"device\",\"_field\"])\r\n",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          },
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_disk_written_bytes_total\")\r\n  |> filter(fn: (r) => exists r.device and r.device != \"\")\r\n  |> group(columns: [\"serverName\",\"device\"])\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  |> derivative(unit: 1s, nonNegative: true)\r\n  |> set(key: \"_field\", value: \"write_bps\")\r\n  |> keep(columns: [\"_time\",\"_value\",\"serverName\",\"device\",\"_field\"])\r\n",
          "refId": "B"
        }
      ],
      "title": "Veeam Software Appliance - Disk Usage",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDB}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "displayName": "${__field.labels.mountpoint}",
          "mappings": [],
          "max": 100,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green"
              },
              {
                "color": "yellow",
                "value": 65
              },
              {
                "color": "dark-orange",
                "value": 75
              },
              {
                "color": "dark-red",
                "value": 90
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 20
      },
      "id": 18,
      "options": {
        "displayMode": "lcd",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 300,
        "minVizHeight": 16,
        "minVizWidth": 8,
        "namePlacement": "auto",
        "orientation": "vertical",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "sizing": "auto",
        "valueMode": "color"
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "hide": false,
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r.serverName =~ /${backupserver:regex}/)\r\n  |> filter(fn: (r) => r._measurement == \"node_filesystem_size_bytes\" or r._measurement == \"node_filesystem_free_bytes\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\r\n  |> pivot(rowKey: [\"_time\",\"serverName\",\"instance\",\"version\",\"device\",\"fstype\",\"mountpoint\"], columnKey: [\"_measurement\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({ r with _value: 100.0 * (1.0 - (float(v: r.node_filesystem_free_bytes) / float(v: r.node_filesystem_size_bytes))) }))\r\n  |> keep(columns: [\"_time\",\"_value\",\"serverName\",\"device\",\"fstype\",\"mountpoint\"])\r\n  |> group(columns: [\"serverName\",\"mountpoint\"])\r\n",
          "refId": "A",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDB}"
          }
        }
      ],
      "title": "Veam Software Appliance - Volume Usage",
      "type": "bargauge"
    }
  ],
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": [
      {
        "auto": true,
        "auto_count": 100,
        "auto_min": "60s",
        "current": {
          "text": "$__auto",
          "value": "$__auto"
        },
        "label": "Sampling",
        "name": "inter",
        "options": [
          {
            "selected": false,
            "text": "1m",
            "value": "1m"
          },
          {
            "selected": false,
            "text": "10m",
            "value": "10m"
          },
          {
            "selected": false,
            "text": "30m",
            "value": "30m"
          },
          {
            "selected": false,
            "text": "1h",
            "value": "1h"
          },
          {
            "selected": false,
            "text": "6h",
            "value": "6h"
          },
          {
            "selected": false,
            "text": "12h",
            "value": "12h"
          },
          {
            "selected": false,
            "text": "1d",
            "value": "1d"
          },
          {
            "selected": false,
            "text": "7d",
            "value": "7d"
          },
          {
            "selected": false,
            "text": "14d",
            "value": "14d"
          },
          {
            "selected": false,
            "text": "30d",
            "value": "30d"
          }
        ],
        "query": "1m,10m,30m,1h,6h,12h,1d,7d,14d,30d",
        "refresh": 2,
        "type": "interval"
      },
      {
        "current": {},
        "definition": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node_time_seconds\")\r\n  |> keep(columns: [\"serverName\"])\r\n  |> distinct(column: \"serverName\")\r\n  |> group()",
        "description": "",
        "includeAll": true,
        "label": "Backup Server",
        "multi": true,
        "name": "backupserver",
        "options": [],
        "query": {
          "query": "from(bucket: v.defaultBucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node_time_seconds\")\r\n  |> keep(columns: [\"serverName\"])\r\n  |> distinct(column: \"serverName\")\r\n  |> group()"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-1h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Grafana Dashboard for Veeam Software Appliance",
  "uid": "b09e0d44-887e-408d-81dc-dc018461abcf",
  "version": 4,
  "weekStart": ""
}